name: CICD Pipeline

on:
  push:
    branches:
      - main


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build_image:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Ensure these secrets are set in your GitHub repository
          password: ${{ secrets.DOCKER_PASSWORD }}  # Ensure these secrets are set in your GitHub repository

      - name: Build Docker image
        run: docker build -t myapp:v1.0 .

      - name: Push Docker image
        run: docker tag myapp:v1.0 ${{ secrets.DOCKER_USERNAME }}/myapp:v1.0 && docker push ${{ secrets.DOCKER_USERNAME }}/myapp:v1.0

  deploy:
    runs-on: ubuntu-latest
    needs: build_image  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # Ensure this secret is set in your GitHub repository
          SERVER_USER: ${{ secrets.SERVER_USER }}         # Ensure this secret is set in your GitHub repository
          SERVER_IP: ${{ secrets.SERVER_IP }}             # Ensure this secret is set in your GitHub repository
        run: |
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:v1.0
            docker stop myapp || true
            docker rm myapp || true
            docker-compose up -d
          EOF
        
